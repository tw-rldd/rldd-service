import org.springframework.cloud.contract.verifier.config.TestFramework
import org.springframework.cloud.contract.verifier.config.TestMode

buildscript {
    ext {
        kotlinVersion = '1.2.41'
        springBootVersion = '2.0.2.RELEASE'
        springContractVersion = '1.2.4.RELEASE'
        dependencyManagementVersion = '0.6.0.RELEASE'
        spockVersion = '1.1-groovy-2.4'
        groovyVersion = '2.4.12'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${springContractVersion}"
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'spring-cloud-contract'

group = 'com.thoughtworks.rldd'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


ext {
    springCloudVersion = 'Finchley.BUILD-SNAPSHOT'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-hateoas')
//	compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.data:spring-data-commons')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.flywaydb:flyway-core')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
//	runtime('mysql:mysql-connector-java')
    compileOnly('org.projectlombok:lombok')


    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.cloud:spring-cloud-starter-contract-verifier')

    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "org.spockframework:spock-spring:${spockVersion}"
    testCompile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.7.9'
    // to mock concrete class
    testCompile("org.hamcrest:hamcrest-all:1.3")
    testCompile ("org.codehaus.groovy:groovy-all:${groovyVersion}")
    testCompile group: 'com.github.hippoom', name: 'test-data-builder', version: '0.4.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
//	dependencies {
//		dependency group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
//		dependency('com.athaydes:spock-reports:1.2.12') {
//			exclude group: 'org.codehaus.groovy'
//			exclude group: 'org.spockframework'
//		}
//	}
}

contracts {
    basePackageForTests = 'com.thoughtworks.rldd.service.contracts'
//	packageWithBaseClasses = 'com.thoughtworks.rldd.service.contracts'
//    baseClassForTests = 'com.github.yasenia.contracts.HomeBase'
    baseClassForTests = 'com.thoughtworks.rldd.service.contracts.AbstractMvcTest'
//    contractsDslDir = file('contracts')

    targetFramework = TestFramework.SPOCK

//	contractRepository {
//		repositoryUrl("http://localhost:8081/repository/maven-releases")
//		username("admin")
//		password("admin123")
//		cacheDownloadedContracts(false)
//	}

    // the following properties are used when you want to provide where the JAR with contract lays
    contractDependency {
        stringNotation = "com.thoughtworks.rldd:rldd-contracts"
    }
    contractsPath = "contracts"
    contractsWorkOffline = true
}

idea {
    module {
        testSourceDirs += file("${buildDir}/generated-test-sources/contracts")
    }
}
